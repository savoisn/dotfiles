bright_up(){
  max_brightness=$(cat /sys/class/backlight/intel_backlight/max_brightness)
  brightness=$(cat /sys/class/backlight/intel_backlight/brightness)
  echo $max_brightness
  echo $brightness

  if [ $brightness -lt $max_brightness ]; then
    let brightness=$brightness+100
    echo "echo $brightness > /sys/class/backlight/intel_backlight/brightness" | sudo zsh
  fi
}

bright_down(){

  brightness=$(cat /sys/class/backlight/intel_backlight/brightness)

  if [ $brightness -gt 0 ]; then
    let brightness=$brightness-100
    echo "echo $brightness > /sys/class/backlight/intel_backlight/brightness" | sudo zsh #or bash
  fi

}

alias elixir="docker run -it -u `id -u`:`id -g` --rm -v `pwd`:/appli -v /etc/passwd:/etc/passwd -v /etc/group:/etc/group nsa/phoenix:e133 elixir "

alias iex="docker run -it -u `id -u`:`id -g` --rm -v `pwd`:/appli -v /etc/passwd:/etc/passwd -v /etc/group:/etc/group nsa/phoenix:e133 iex "

export DOCKER_REPO_PREFIX="nsa"


dcleanup(){
	local containers
	containers=( $(docker ps -aq 2>/dev/null) )
	docker rm "${containers[@]}" 2>/dev/null
	local volumes
	volumes=( $(docker ps --filter status=exited -q 2>/dev/null) )
	docker rm -v "${volumes[@]}" 2>/dev/null
	local images
	images=( $(docker images --filter dangling=true -q 2>/dev/null) )
	docker rmi "${images[@]}" 2>/dev/null
}

del_stopped(){
	local name=$1
	local state
	state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

	if [[ "$state" == "false" ]]; then
		docker rm "$name"
	fi
}

relies_on(){
	for container in "$@"; do
		local state
		state=$(docker inspect --format "{{.State.Running}}" "$container" 2>/dev/null)

		if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
			echo "$container is not running, starting it for you."
			$container
		fi
	done
}

atom(){
docker run -v /tmp/.X11-unix:/tmp/.X11-unix \
  -u 1000:1000
  -e $HOME
	-e DISPLAY=unix$DISPLAY nsa/atom
}

chrome(){
	# add flags for proxy if passed
	local proxy=
	local map
	local args=$*
	if [[ "$1" == "tor" ]]; then
		relies_on torproxy

		map="MAP * ~NOTFOUND , EXCLUDE torproxy"
		proxy="socks5://torproxy:9050"
		args="https://check.torproject.org/api/ip ${*:2}"
	fi

	del_stopped chrome

	# one day remove /etc/hosts bind mount when effing
	# overlay support inotify, such bullshit
	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /etc/machine-id:/etc/machine-id:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		-v "${HOME}/Downloads:/root/Downloads" \
		-v "${HOME}/Pictures:/root/Pictures" \
		-v "${HOME}/Torrents:/root/Torrents" \
		-v "${HOME}/.chrome/data:/data" \
    -v "${HOME}/.chrome/fakehome:/home/nico" \
		-e XAUTHORITY \
		-v "/var/run/user/$(id -u):/var/run/user/$(id -u)" \
		-v "${HOME}/.Xauthority:$HOME/.Xauthority" \
		-v /var/run/dbus:/var/run/dbus \
		-v /dev/shm:/dev/shm \
		-v /etc/hosts:/etc/hosts \
    -v /etc/passwd:/etc/passwd \
    -e "HOME:${HOME}" \
		--security-opt seccomp:/home/nico/Project/jessfraz/dotfiles/etc/docker/seccomp/chrome.json \
		--device /dev/snd \
		--device /dev/dri \
		--device /dev/video0 \
		--device /dev/bus/usb \
		--group-add audio \
		--group-add video \
		--name chrome \
    -u $(id -u):$(id -g) \
		nsa/chrome --user-data-dir=/data \
		--proxy-server="$proxy" \
		--host-resolver-rules="$map" "$args" 
}

hangups(){

	del_stopped hangups

  docker run -it --rm \
		-v /etc/localtime:/etc/localtime:ro \
		-v /etc/machine-id:/etc/machine-id:ro \
    -v ~/.dbus/:/home/nico/.dbus/ \
		-v /var/run/dbus:/var/run/dbus \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v "${HOME}/.Xauthority:$HOME/.Xauthority" \
		-v "/var/run/user/$(id -u):/var/run/user/$(id -u)" \
		-e "DISPLAY=unix${DISPLAY}" \
		-e XAUTHORITY \
		-e DBUS_SESSION_BUS_ADDRESS \
		--net=host \
    --name hangups \
    nsa/hangups
}

powerpoint(){
  local file=$1
	del_stopped libreoffice
  docker run -d \
		-v /etc/machine-id:/etc/machine-id:ro \
    -v /etc/localtime:/etc/localtime:ro \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e "DISPLAY=unix$DISPLAY" \
    -v "${HOME}/Project/perso/prez/docker-on-desktop/:/data/" \
    -v "${HOME}/.chrome/fakehome:/home/nico" \
    -v /etc/passwd:/etc/passwd \
    -e GDK_SCALE \
    -e GDK_DPI_SCALE \
    -e "HOME" \
    -u $(id -u):$(id -g) \
    --name libreoffice \
    nsa/libreoffice "/data/${file}"
}

mdp(){
  local file=$1

	del_stopped mdp

  docker run -it --rm \
		-v /etc/localtime:/etc/localtime:ro \
		-v /etc/machine-id:/etc/machine-id:ro \
		-v "${HOME}/Project/perso/prez/docker-on-desktop":/data \
    -v /etc/passwd:/etc/passwd \
    -e "HOME" \
    -u $(id -u):$(id -g) \
    --name mdp \
    nsa/mdp "/data/${file}"
}

mutt(){
	del_stopped mutt
	read -s ?"type gmail password " password

	GMAIL="nicolas.savois@gmail.com"
	GMAIL_NAME=$GMAIL
	GMAIL_PASS=$password
	GMAIL_FROM=$GMAIL
	gpg_id="$(gpg --list-keys --with-colons nicolas.savois@gmail.com | awk -F':' '/^pub/ { print $5 }')"

	docker run -it --rm \
			-v /etc/localtime:/etc/localtime \
			-e GMAIL=$GMAIL -e GMAIL_NAME=$GMAIL_NAME \
			-e GMAIL_PASS=$GMAIL_PASS -e GMAIL_FROM=$GMAIL_FROM \
			-e gpg_id \
			-v $HOME/.gnupg:/home/user/.gnupg \
			-v $HOME/.mutt/cache/:/home/user/.mutt/cache/ \
			--name mutt \
			nsa/mutt
}

notify_osd(){
	del_stopped notify_osd

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		--net none \
		-v /etc \
		-v /home/user/.dbus \
		-v /home/user/.cache/dconf \
		-e "DISPLAY=unix${DISPLAY}" \
		--name notify_osd \
		nsa/notify-osd
}

playonlinux(){
	# one day remove /etc/hosts bind mount when effing
	# overlay support inotify, such bullshit
	docker run -it --rm \
		-v /etc/localtime:/etc/localtime:ro \
		-v /etc/machine-id:/etc/machine-id:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
    -v /home/nico/Games:/home/gamer:rw \
		-v "/var/run/user/$(id -u):/var/run/user/$(id -u)" \
		-v "${HOME}/.Xauthority:$HOME/.Xauthority" \
		-v /var/run/dbus:/var/run/dbus \
		-v /dev/shm:/dev/shm \
		-v /etc/hosts:/etc/hosts \
    -v /etc/passwd:/etc/passwd \
    -e "HOME:${HOME}" \
		-e "DISPLAY=unix${DISPLAY}" \
		-e XAUTHORITY \
    -u $(id -u):$(id -g) \
		--security-opt seccomp:/home/nico/Project/jessfraz/dotfiles/etc/docker/seccomp/chrome.json \
		--device /dev/snd \
		--device /dev/dri \
		--device /dev/video0 \
		--device /dev/bus/usb \
		--group-add audio \
		--group-add video \
		--name playonlinux \
    --entrypoint /bin/bash \
		nsa/playonlinux
}

pulseaudio(){
	del_stopped pulseaudio

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		--device /dev/snd \
		-p 4713:4713 \
		--restart always \
		--group-add audio \
		--name pulseaudio \
		nsa/pulseaudio
}

spotify(){
	del_stopped spotify

	docker run -d \
    -v ~/.dbus/:/home/nico/.dbus/ \
		-v /var/run/dbus:/var/run/dbus \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v "${HOME}/.Xauthority:$HOME/.Xauthority" \
		-v "/var/run/user/$(id -u):/var/run/user/$(id -u)" \
		-e XAUTHORITY \
		-e DBUS_SESSION_BUS_ADDRESS \
		--net=host \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		-e QT_DEVICE_PIXEL_RATIO \
		--security-opt seccomp:unconfined \
		--device /dev/snd \
		--device /dev/dri \
		--group-add audio \
		--group-add video \
		--name spotify \
		nsa/spotify
}

termboy(){
	local game=$1

	docker run --rm -it \
		--device /dev/snd \
		--name termboy \
		nsa/termboy "/games/${game}.gb"
}

torproxy(){
	del_stopped torproxy

	docker run -d \
		--restart always \
		-v /etc/localtime:/etc/localtime:ro \
		-p 9050:9050 \
		--name torproxy \
		nsa/tor-proxy

	hostess add torproxy "$(docker inspect --format '{{.NetworkSettings.Networks.bridge.IPAddress}}' torproxy)"
}


mirror-display(){
  if [[ $# != 1 ]]; then
    echo "need 1 param for monitor name"
    return 1
  fi
	local monitor_name=$1
  echo $monitor_name

	#xrandr --newmode "3840x2160_30.00"  338.75  3840 4080 4488 5136  2160 2163 2168 2200 -hsync +vsync
	#xrandr --addmode  DP1 "3840x2160_30.00"
	#xrandr --output eDP1 --auto --primary --output DP1 --mode 3840x2160_30.00 --above eDP1 --rate 30

  #xrandr --newmode "1024x768_safe" 65.00 1024 1048 1184 1344 768 771 777 806 -HSync -VSync
  #xrandr --addmode VGA1 "1024x768_safe"
  
  #xrandr --newmode "1920x1080-default"   138.70   1920 1968 2000 2080   1080 1083 1088 1111 +hsync -vsync
  #xrandr --addmode eDP1 "1920x1080-default"
  
  xrandr --output eDP1 --auto --primary --output $monitor_name --auto --same-as eDP1
  retour=$?
  echo $retour
  return $retour
}


shutdown-display(){
  if [[ $# != 1 ]]; then
    echo "need 1 param for monitor name"
    return 1
  fi
	local monitor_name=$1
  xrandr --output eDP1 --auto --output $monitor_name --off
}




